
/*change this to a loop*/
WITH yesterday as (
	SELECT * from actors
	WHERE currentyear = 1969
), today as (
	SELECT * from actor_films
	WHERE year = 1970
),avg_rating AS (
    SELECT actorid, AVG(rating) AS avg_rating
    FROM today
    GROUP BY actorid
)

SELECT COALESCE (t.actor, y.actor) as actor,
	COALESCE (t.actorid, y.actorid) as actorid,
	COALESCE (t.year, y.currentyear) as currentyear,
	--insert the first record
	CASE WHEN y.films is NULL THEN
			ARRAY[ROW(t.film, t.votes, t.rating,t.filmid)::films]
			
	--append the new records to old records
		 WHEN t.film is NOT NULL THEN y.films || 
		 ARRAY[ROW(t.film, t.votes, t.rating,t.filmid)::films]

	--leave the first record as it is if they are new records at all (the player has retired)
		ELSE y.films END AS films,

	--assign scoring class based on current season's data if they are playing 
	--else pull it from the last one before they retired
	CASE WHEN t.film IS NOT NULL THEN 
			CASE WHEN ar.avg_rating >8 THEN 'star'
				WHEN ar.avg_rating > 7 AND ar.avg_rating <= 8 THEN 'good'
				WHEN ar.avg_rating > 6 AND ar.avg_rating <= 7 THEN 'average'
				ELSE 'bad'
			END::quality_class
		ELSE y.quality_class
	END as quality_class
	
	FROM today t 
	FULL OUTER JOIN 
	yesterday y 
	ON t.actorid = y.actorid
	LEFT JOIN avg_rating  ar
	ON COALESCE(t.actorid, y.actorid) = ar.actorid


