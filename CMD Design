DO $$
DECLARE
    yr INTEGER;
BEGIN
    FOR yr IN 1970..2021 LOOP
        
        -- Get actors from the previous year to compare/update
        WITH yesterday AS (
            SELECT * FROM actors
            WHERE currentyear = yr-1
        ),
        -- Get actor films from the current year
        today AS (
            SELECT * FROM actor_films
            WHERE year = yr
        ),
        -- Calculate average rating per actor for the current year
        avg_rating AS (
            SELECT actorid, AVG(rating) AS avg_rating
            FROM today
            GROUP BY actorid
        ),
        -- Aggregate films per actor as an array of 'films' composite type with ratings included
        agg_films AS (
            SELECT 
                a.actor,
                a.actorid, 
                a.year,
                array_agg(ROW(a.film,a.filmid, a.votes, av.avg_rating)::films) AS actor_films
            FROM actor_films a
            JOIN avg_rating av ON a.actorid = av.actorid
            WHERE year = yr
            GROUP BY a.actor, a.actorid, a.year
        ),
        -- Determine if actor is active this year and assign a quality class based on avg rating or previous quality class
        qualityandactive AS (
            SELECT 
                t.actor AS actor,
                t.actorid AS actorid,
                yr AS currentyear,
                MAX(CASE WHEN t.year = yr THEN 1 ELSE 0 END) AS isactive,
                CASE 
                    WHEN MAX(t.film) IS NOT NULL THEN 
                        CASE 
                            WHEN MAX(ar.avg_rating) > 8 THEN 'star'
                            WHEN MAX(ar.avg_rating) > 7 THEN 'good'
                            WHEN MAX(ar.avg_rating) > 6 THEN 'average'
                            ELSE 'bad'
                        END::quality_class
                    ELSE MAX(y.quality_class)
                END AS quality_class
            FROM today t
            FULL JOIN yesterday y ON t.actorid = y.actorid
            LEFT JOIN avg_rating ar ON t.actorid = ar.actorid
            FULL JOIN agg_films a ON t.actorid = a.actorid AND t.year = a.year
            GROUP BY 1,2,3
        )
        
        -- Insert or update the actors table for the current year:
        -- If no previous films, insert new films
        -- If new films exist, append them to old films
        -- If retired (no new films), keep old films
        INSERT INTO actors
        SELECT 
            COALESCE(t.actor, y.actor) AS actor,
            COALESCE(t.actorid, y.actorid) AS actorid,
            yr AS currentyear,
            CASE 
                WHEN y.films IS NULL THEN t.actor_films                
                WHEN t.actor_films IS NOT NULL THEN y.films || t.actor_films
                ELSE y.films
            END AS films,
            CASE WHEN qa.isactive = 1 THEN TRUE ELSE FALSE END AS isactive,
            qa.quality_class
        FROM agg_films t
        FULL JOIN yesterday y ON t.actorid = y.actorid
        LEFT JOIN qualityandactive qa ON t.actorid = qa.actorid AND t.year = qa.currentyear;
        
    END LOOP;
END $$;
