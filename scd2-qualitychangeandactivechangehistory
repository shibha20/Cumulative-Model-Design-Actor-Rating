WITH avg_rating AS (
    -- Calculate average rating per actor per year by unnesting the films array
    SELECT 
        a.actorid,
        a.actor,
        a.currentyear,
        AVG(f.rating) AS avg_rating
    FROM actors a
    CROSS JOIN LATERAL unnest(a.films) AS f -- expand films array into rows
    GROUP BY a.actorid, a.actor, a.currentyear
),

checks AS (
    -- Assign quality class based on avg_rating and mark if the current year is 2025 (active)
    SELECT *, 
        CASE 
            WHEN ar.avg_rating > 8 THEN 'star'
            WHEN ar.avg_rating > 7 AND ar.avg_rating <= 8 THEN 'good'
            WHEN ar.avg_rating > 6 AND ar.avg_rating <= 7 THEN 'average'
            ELSE 'bad'
        END::quality_class,
        CASE 
            WHEN ar.currentyear = 2025 THEN TRUE 
            ELSE FALSE
        END AS isactive
    FROM avg_rating ar
),

changetracker AS (
    -- Detect if quality_class or active status changed in the next year per actor
    SELECT *, 
        CASE 
            WHEN quality_class <> LEAD(quality_class, 1) OVER (PARTITION BY actorid ORDER BY currentyear) THEN 1 
            ELSE 0 
        END AS qualitychanged,
        CASE 
            WHEN isactive <> LEAD(isactive, 1) OVER (PARTITION BY actorid ORDER BY currentyear) THEN 1 
            ELSE 0 
        END AS activechanged
    FROM checks c1
),

historytable AS (
    -- For each record, determine the end quality class and end isactive by looking at next year's values
    SELECT *,
        CASE 
            WHEN LEAD(quality_class, 1) OVER (PARTITION BY actorid ORDER BY currentyear) IS NULL THEN quality_class
            ELSE LEAD(quality_class, 1) OVER (PARTITION BY actorid ORDER BY currentyear)
        END AS end_quality_class,
        CASE 
            WHEN LEAD(isactive, 1) OVER (PARTITION BY actorid ORDER BY currentyear) IS NULL THEN isactive
            ELSE LEAD(isactive, 1) OVER (PARTITION BY actorid ORDER BY currentyear)
        END AS end_isactive
    FROM changetracker f
),

identifynochanges AS (
    -- Calculate running sums of quality and active changes per actor to identify streaks without changes
    SELECT *, 
        SUM(qualitychanged) OVER (PARTITION BY actorid ORDER BY currentyear) AS qualitystreakcount,
        SUM(activechanged) OVER (PARTITION BY actorid ORDER BY currentyear) AS activestreakcount
    FROM historytable f
),

finaltable AS (
    -- For each actor and streak, identify the start and end year, quality class and active status ranges
    SELECT DISTINCT 
        actorid, 
        actor,
        FIRST_VALUE(currentyear) OVER (PARTITION BY actorid, qualitystreakcount, activestreakcount) AS start_year,
        LAST_VALUE(currentyear) OVER (PARTITION BY actorid, qualitystreakcount, activestreakcount) AS end_year,
        2025 AS currentyear,  -- Fixed current year for this snapshot
        FIRST_VALUE(quality_class) OVER (PARTITION BY actorid, qualitystreakcount, activestreakcount) AS start_quality_class,
        LAST_VALUE(quality_class) OVER (PARTITION BY actorid, qualitystreakcount, activestreakcount) AS end_quality_class,
        FIRST_VALUE(isactive) OVER (PARTITION BY actorid, qualitystreakcount, activestreakcount) AS start_isactive,
        LAST_VALUE(isactive) OVER (PARTITION BY actorid, qualitystreakcount, activestreakcount) AS end_isactive
    FROM identifynochanges
)

-- Insert the final slowly changing dimension records into the history table
INSERT INTO actors_history_scd(
    SELECT 
        actorid,
        actor,
        start_year,
        end_year,
        currentyear,
        start_quality_class,
        end_quality_class,
        start_isactive,
        end_isactive
    FROM finaltable
);
